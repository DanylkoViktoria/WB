import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import CommandStart

# üîë –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Railway –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ)
TOKEN = os.getenv("TOKEN") or "8422502818:AAE3iEbsck7e67HmJKVsHRMFvtnShFahbxQ"
GROUP_ID = int(os.getenv("GROUP_ID") or -4867326536)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≥—Ä—É–ø–∏ <-> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
bridge = {}

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ë–æ—Ç –¥–ª—è —Ç–µ–π–∫–æ–≤üí•üí•")

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –≤ –±–æ—Ç
@dp.message(lambda msg: msg.chat.type == "private")
async def user_message(message: Message):
    sent = await bot.send_message(
        GROUP_ID,
        f" {message.from_user.full_name} \n{message.text}"
    )
    # –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—ñ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bridge[sent.message_id] = message.from_user.id
    #await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É")

# –ê–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É –≥—Ä—É–ø—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message(lambda msg: msg.chat.id == GROUP_ID and msg.reply_to_message)
async def group_reply(message: Message):
    replied_id = message.reply_to_message.message_id
    if replied_id in bridge:
        user_id = bridge[replied_id]
        await bot.send_message(
            user_id,
            f"{message.text}"
        )
    #else:
        #await message.reply("‚ö† –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

# Spyder –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.create_task(main())
    else:
        asyncio.run(main())
